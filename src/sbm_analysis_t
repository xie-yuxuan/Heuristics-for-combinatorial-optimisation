import os
import json
import re
import numpy as np
import matplotlib.pyplot as plt

def sbm_plot_nmi_transition(results_folder, num_nodes, num_groups):
    pattern = re.compile(rf"SBM\({num_nodes}, {num_groups}, t\d\)c_results\.json")
    result_files = [f for f in os.listdir(results_folder) if pattern.match(f)]

    if not result_files:
        print("No matching results found.")
        return

    nmi_data = {}

    for file in result_files:
        file_path = os.path.join(results_folder, file)

        with open(file_path, 'r') as f:
            results = json.load(f)

        # Extract "tX" (e.g., "t0", "t1", ..., "t9") from filename
        match = re.search(r"t(\d)", file)
        if not match:
            continue
        t_value = int(match.group(1))  # Extract number after 't'

        nmi_g_list = []
        nmi_r_list = []

        for key in results.get("cost_data", {}):
            cost_entry = results["cost_data"][key]
            nmi_g = cost_entry.get("nmi_g")
            nmi_r = cost_entry.get("nmi_r")

            if nmi_g is not None:
                nmi_g_list.append(nmi_g)
            if nmi_r is not None:
                nmi_r_list.append(nmi_r)

        # Compute average NMI across all initial colorings
        if nmi_g_list and nmi_r_list:
            avg_nmi_g = np.mean(nmi_g_list)
            avg_nmi_r = np.mean(nmi_r_list)
            nmi_data[t_value] = (avg_nmi_g, avg_nmi_r)

    if not nmi_data:
        print("No valid NMI data found.")
        return

    # Convert available t-values into x-axis values
    t_values = sorted(nmi_data.keys())  # Sort numerically
    x_values = [(t - 4.5) / 4.5 for t in t_values]  # Scale to [-1, 1]
    nmi_g_values = [nmi_data[t][0] for t in t_values]
    nmi_r_values = [nmi_data[t][1] for t in t_values]

    # Plot
    plt.figure(figsize=(8, 5))
    plt.plot(x_values, nmi_g_values, marker='o', linestyle='-', label='Greedy NMI', color='red')
    plt.plot(x_values, nmi_r_values, marker='s', linestyle='-', label='Reluctant NMI', color='green')

    plt.xlabel("Group Mode (Mapped from t0-t9 → [-1, 1])")
    plt.ylabel("Average NMI")
    plt.title(f"NMI Transition for SBM({num_nodes}, {num_groups}, tX)")
    plt.legend()
    plt.grid(True)

    # Set dynamic x-ticks based on available data
    plt.xticks(x_values, labels=[f"{x:.2f}" for x in x_values])

    plt.savefig(f"plots/SBM({num_nodes}, {num_groups}, t)_nmi.png")

    plt.show()


def sbm_plot_loglikelihood_diff(results_folder, num_nodes, num_groups):
    """
    Plots the difference between the best greedy and best reluctant log-likelihood 
    for SBM graphs with different group modes (t0 to t9).

    Args:
        results_folder (str): Path to the folder containing the results JSON files.
        num_nodes (int): Number of nodes in the SBM graph.
        num_groups (int): Number of groups in the SBM graph.
        save_folder (str, optional): Folder to save the plot. Default is "plots".
    """


    # Regex pattern to match SBM result files with the correct parameters
    pattern = re.compile(rf"SBM\({num_nodes}, {num_groups}, t\d\)c_results\.json")
    result_files = [f for f in os.listdir(results_folder) if pattern.match(f)]

    if not result_files:
        print("No matching results found.")
        return

    loglikelihood_diffs = {}

    for file in result_files:
        file_path = os.path.join(results_folder, file)

        with open(file_path, 'r') as f:
            results = json.load(f)

        # Extract "tX" (e.g., "t0", "t1", ..., "t9") from filename
        match = re.search(r"t(\d)", file)
        if not match:
            continue
        t_value = int(match.group(1))  # Extract number after 't'

        best_loglikelihood_g = float('-inf')  # Track best greedy log-likelihood
        best_loglikelihood_r = float('-inf')  # Track best reluctant log-likelihood

        for key in results.get("cost_data", {}):
            cost_entry = results["cost_data"][key]
            loglikelihood_g = cost_entry.get("cost_data_g")[-1][-1]  # Take last value (best)
            loglikelihood_r = cost_entry.get("cost_data_r")[-1][-1]  # Take last value (best)

            best_loglikelihood_g = max(best_loglikelihood_g, loglikelihood_g)
            best_loglikelihood_r = max(best_loglikelihood_r, loglikelihood_r)

        # Compute the difference: best greedy - best reluctant
        loglikelihood_diffs[t_value] = best_loglikelihood_g - best_loglikelihood_r

    if not loglikelihood_diffs:
        print("No valid log-likelihood data found.")
        return

    # Convert available t-values into x-axis values
    t_values = sorted(loglikelihood_diffs.keys())  # Sort numerically
    x_values = [(t - 4.5) / 4.5 for t in t_values]  # Scale to [-1, 1]
    diff_values = [loglikelihood_diffs[t] for t in t_values]

    # Plot
    plt.figure(figsize=(8, 5))
    plt.plot(x_values, diff_values, marker='o', linestyle='-', color='blue', label='Log-Likelihood Difference')

    plt.xlabel("Group Mode (Mapped from t0-t9 → [-1, 1])")
    plt.ylabel("Best Greedy - Best Reluctant Log-Likelihood")
    plt.title(f"Log-Likelihood Difference for SBM({num_nodes}, {num_groups}, tX)")
    plt.legend()
    plt.grid(True)

    # Set dynamic x-ticks based on available data
    plt.xticks(x_values, labels=[f"{x:.2f}" for x in x_values])

    plot_path = os.path.join("plots", f"SBM({num_nodes}, {num_groups}, t)_loglikelihood_diff.png")
    plt.savefig(plot_path)
    plt.show()

    print(f"Saved plot to {plot_path}")


def sbm_plot_nmi_eigen(results_folder, num_nodes, num_groups, save_folder="plots"):
    """
    Plots the averaged NMI for greedy and reluctant optimization across different tX values.

    Args:
        results_folder (str): Path to the folder containing the results JSON files.
        num_nodes (int): Number of nodes in the SBM graph.
        num_groups (int): Number of groups in the SBM graph.
        save_folder (str, optional): Folder to save the plot. Default is "plots".
    """
    # Ensure save folder exists
    os.makedirs(save_folder, exist_ok=True)

    # Regex pattern to match SBM result files with the correct parameters
    pattern = re.compile(rf"SBM\({num_nodes}, {num_groups}, t(\d{{2}})\)ce_results\.json")
    result_files = [f for f in os.listdir(results_folder) if pattern.match(f)]

    if not result_files:
        print("No matching results found.")
        return

    nmi_data = {}
    
    for file in result_files:
        file_path = os.path.join(results_folder, file)
        
        with open(file_path, 'r') as f:
            results = json.load(f)
        
        # Extract "tXX" (e.g., "t00", "t01", ..., "t19") from filename
        match = re.search(r"t(\d{2})", file)
        if not match:
            continue
        
        t_full_value = int(match.group(1))  # Extract number after 't' (e.g., 00, 01, ..., 19)
        t_group = t_full_value // 10  # Convert t00-t09 -> t0, t10-t19 -> t1, etc.
        
        # Get NMI values
        cost_entry = results.get("cost_data", {})
        nmi_g = cost_entry.get("nmi_g")
        nmi_r = cost_entry.get("nmi_r")
        
        if nmi_g is not None and nmi_r is not None:
            if t_group not in nmi_data:
                nmi_data[t_group] = {"nmi_g": [], "nmi_r": []}
            nmi_data[t_group]["nmi_g"].append(nmi_g)
            nmi_data[t_group]["nmi_r"].append(nmi_r)
    
    if not nmi_data:
        print("No valid NMI data found.")
        return
    
    # print(nmi_data[8])
    
    # Compute averages for each tX group
    t_values = sorted(nmi_data.keys())
    x_values = [(t - 4.5) / 4.5 * 0.95 for t in t_values]  # Scale to [-0.95, 0.95]
    nmi_g_values = [np.mean(nmi_data[t]["nmi_g"]) for t in t_values]
    nmi_r_values = [np.mean(nmi_data[t]["nmi_r"]) for t in t_values]

    # Plot
    plt.figure(figsize=(8, 5))
    plt.plot(x_values, nmi_g_values, marker='o', linestyle='-', label='Greedy NMI', color='red')
    plt.plot(x_values, nmi_r_values, marker='s', linestyle='-', label='Reluctant NMI', color='green')

    plt.xlabel("Group Mode (Mapped from t0-t9 → [-0.95, 0.95])")
    plt.ylabel("NMI")
    plt.title(f"Averaged NMI Transition with eigenvector initial coloring for SBM({num_nodes}, {num_groups}, tX)")
    plt.legend()
    plt.grid(True)

    # Set dynamic x-ticks based on available data
    plt.xticks(x_values, labels=[f"{x:.2f}" for x in x_values])

    plot_path = os.path.join(save_folder, f"SBM({num_nodes}, {num_groups}, t)_nmi_eigen_avg.png")
    plt.savefig(plot_path)
    plt.show()

    print(f"Saved plot to {plot_path}")



def sbm_plot_log_likelihood_diff_eigen(results_folder, num_nodes, num_groups, save_folder="plots"):
    """
    Plots the difference between greedy and reluctant final log likelihood across different tX values,
    averaging over multiple seeds (e.g., t00-t09 -> t0, t10-t19 -> t1, etc.).

    Args:
        results_folder (str): Path to the folder containing the results JSON files.
        num_nodes (int): Number of nodes in the SBM graph.
        num_groups (int): Number of groups in the SBM graph.
        save_folder (str, optional): Folder to save the plot. Default is "plots".
    """
    import os
    import json
    import re
    import numpy as np
    import matplotlib.pyplot as plt

    # Ensure save folder exists
    os.makedirs(save_folder, exist_ok=True)

    # Regex pattern to match SBM result files with the correct parameters
    pattern = re.compile(rf"SBM\({num_nodes}, {num_groups}, t(\d{{2}})\)ce_results\.json")
    result_files = [f for f in os.listdir(results_folder) if pattern.match(f)]

    if not result_files:
        print("No matching results found.")
        return

    log_likelihood_diff_data = {}

    for file in result_files:
        file_path = os.path.join(results_folder, file)

        with open(file_path, 'r') as f:
            results = json.load(f)

        # Extract "tXX" (e.g., "t00", "t01", ..., "t19") from filename
        match = re.search(r"t(\d{2})", file)
        if not match:
            continue
        t_full_value = int(match.group(1))  # Extract full tXX number
        t_group = t_full_value // 10  # Convert t00-t09 to t0, t10-t19 to t1, etc.

        # Get log likelihood data
        cost_entry = results.get("cost_data", {})
        log_likelihood_data_g = cost_entry.get("cost_data_g", [])
        log_likelihood_data_r = cost_entry.get("cost_data_r", [])

        # Check if both log likelihood data are available and not empty
        if log_likelihood_data_g and log_likelihood_data_r:
            final_log_likelihood_g = log_likelihood_data_g[-1][-1]  # Last value
            final_log_likelihood_r = log_likelihood_data_r[-1][-1]  # Last value

            # Compute the difference between final log likelihoods
            log_likelihood_diff = final_log_likelihood_g - final_log_likelihood_r

            if t_group not in log_likelihood_diff_data:
                log_likelihood_diff_data[t_group] = []
            log_likelihood_diff_data[t_group].append(log_likelihood_diff)

    if not log_likelihood_diff_data:
        print("No valid log likelihood data found.")
        return

    # Compute average log likelihood difference per t_group
    avg_log_likelihood_diff = {t: np.mean(values) for t, values in log_likelihood_diff_data.items()}

    # Convert available t-values into x-axis values
    t_values = sorted(avg_log_likelihood_diff.keys())  # Sort numerically
    x_values = [(t - 4.5) / 4.5 * 0.95 for t in t_values]  # Scale to [-0.95, 0.95]
    log_likelihood_diff_values = [avg_log_likelihood_diff[t] for t in t_values]

    # Plot
    plt.figure(figsize=(8, 5))
    plt.plot(x_values, log_likelihood_diff_values, marker='o', linestyle='-', label='Log Likelihood Difference', color='blue')

    plt.xlabel("Group Mode (Mapped from tXX → [-0.95, 0.95])")
    plt.ylabel("Final Log Likelihood Difference")
    plt.title(f"Final LL Difference (Greedy - Reluctant) with eigenvec initial coloring for SBM({num_nodes}, {num_groups}, tX)")
    plt.legend()
    plt.grid(True)

    # Set dynamic x-ticks based on available data
    plt.xticks(x_values, labels=[f"{x:.2f}" for x in x_values])

    plot_path = os.path.join(save_folder, f"SBM({num_nodes}, {num_groups}, t)_log_likelihood_diff_eigen_avg.png")
    plt.savefig(plot_path)
    plt.show()

    print(f"Saved plot to {plot_path}")


    

if __name__ == "__main__":
    results_folder = r'C:\Projects\Heuristics for combinatorial optimisation\Heuristics-for-combinatorial-optimisation\results'

    sbm_plot_nmi_transition(results_folder, num_nodes=1000, num_groups=2)

    sbm_plot_loglikelihood_diff(results_folder, num_nodes=1000, num_groups=2)

    sbm_plot_nmi_eigen(results_folder, num_nodes=1000, num_groups=2)

    sbm_plot_log_likelihood_diff_eigen(results_folder, num_nodes=1000, num_groups=2)