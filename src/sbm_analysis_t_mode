import os
import json
import re
import numpy as np
import matplotlib.pyplot as plt

def mode_number_to_x_value(mode_number):
    return -0.95 + (mode_number / 9) * (0.95 - (-0.95))

def sbm_plot_final_ll_vs_mode(results_folder, num_nodes, num_groups, random_prob):
    pattern = re.compile(rf"SBM\({num_nodes}, {num_groups}, t(\d+)0, {random_prob}\)_results\.json")
    
    mode_numbers = []
    ll_values = {"g": [], "r": [], "gr": [], "rr": []}
    colors = {"g": "red", "r": "green", "gr": "orange", "rr": "purple"}
    
    for file in os.listdir(results_folder):
        match = pattern.match(file)
        if match:
            mode_number = int(match.group(1))
            mode_numbers.append(mode_number)
            
            with open(os.path.join(results_folder, file), 'r') as f:
                data = json.load(f)
            
            final_lls = {"g": [], "r": [], "gr": [], "rr": []}
            
            for key in data["cost_data"]:
                final_lls["g"].append(data["cost_data"][key]["cost_data_g"][-1])
                final_lls["r"].append(data["cost_data"][key]["cost_data_r"][-1])
                final_lls["gr"].append(data["cost_data"][key]["cost_data_gr"][-1])
                final_lls["rr"].append(data["cost_data"][key]["cost_data_rr"][-1])
            
            for method in ll_values:
                ll_values[method].append(np.mean(final_lls[method]))
    
    x_values = [mode_number_to_x_value(m) for m in mode_numbers]
    sorted_indices = np.argsort(x_values)
    x_values = np.array(x_values)[sorted_indices]
    
    for method in ll_values:
        ll_values[method] = np.array(ll_values[method])[sorted_indices]
    
    plt.figure(figsize=(10, 6))
    for method, label in zip(["g", "r", "gr", "rr"], ["Greedy", "Reluctant", "Greedy Random", "Reluctant Random"]):
        plt.plot(x_values, ll_values[method], marker='o', label=label, color=colors[method])
    
    plt.xlabel("x Value")
    plt.ylabel("Average Final Log-Likelihood")
    plt.title(f"Average Final LL vs x Value (Nodes: {num_nodes}, Random Prob: {random_prob})")
    plt.legend()
    plt.grid()
    plt.savefig(f"plots/SBM({num_nodes}, {num_groups}, tX, {random_prob})_final_ll.png")
    plt.show()

def sbm_plot_final_nmi_vs_mode(results_folder, num_nodes, num_groups, random_prob):
    pattern = re.compile(rf"SBM\({num_nodes}, {num_groups}, t(\d+)0, {random_prob}\)_results\.json")
    
    mode_numbers = []
    nmi_values = {"g": [], "r": [], "gr": [], "rr": []}
    colors = {"g": "red", "r": "green", "gr": "orange", "rr": "purple"}
    
    for file in os.listdir(results_folder):
        match = pattern.match(file)
        if match:
            mode_number = int(match.group(1))
            mode_numbers.append(mode_number)
            
            with open(os.path.join(results_folder, file), 'r') as f:
                data = json.load(f)
            
            final_nmis = {"g": [], "r": [], "gr": [], "rr": []}
            
            for key in data["cost_data"]:
                final_nmis["g"].append(data["cost_data"][key]["nmi_g"])
                final_nmis["r"].append(data["cost_data"][key]["nmi_r"])
                final_nmis["gr"].append(data["cost_data"][key]["nmi_gr"])
                final_nmis["rr"].append(data["cost_data"][key]["nmi_rr"])
            
            for method in nmi_values:
                nmi_values[method].append(np.mean(final_nmis[method]))
    
    x_values = [mode_number_to_x_value(m) for m in mode_numbers]
    sorted_indices = np.argsort(x_values)
    x_values = np.array(x_values)[sorted_indices]
    
    for method in nmi_values:
        nmi_values[method] = np.array(nmi_values[method])[sorted_indices]
    
    plt.figure(figsize=(10, 6))
    for method, label in zip(["g", "r", "gr", "rr"], ["Greedy", "Reluctant", "Greedy Random", "Reluctant Random"]):
        plt.plot(x_values, nmi_values[method], marker='o', label=label, color=colors[method])
    
    plt.xlabel("x Value")
    plt.ylabel("Average Final NMI")
    plt.title(f"Average Final NMI vs x Value (Nodes: {num_nodes}, Random Prob: {random_prob})")
    plt.legend()
    plt.grid()
    plt.savefig(f"plots/SBM({num_nodes}, {num_groups}, tX, {random_prob})_nmi.png")
    plt.show()


    

if __name__ == "__main__":
    results_folder = r'C:\Projects\Heuristics for combinatorial optimisation\results'

    # sbm_plot_final_ll_vs_mode(results_folder, num_nodes=10000, num_groups=2, random_prob=0.05)

    sbm_plot_final_nmi_vs_mode(results_folder, num_nodes=10000, num_groups=2, random_prob=0.05)


